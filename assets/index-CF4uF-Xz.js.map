{"version":3,"mappings":";uzDAGaA,EAAuB,MAAOC,GAAiB,CACxD,MAAMC,EAAS,MAAMC,EAEfC,EAAc,IAAI,YAElBC,EAAmBH,EAAO,WAAWI,EAAcL,CAAI,CAAC,EAGvD,OAFaG,EAAY,OAAOC,CAAgB,CAG3D,EAEaE,EAAqB,MAAON,GAAiB,CACtD,MAAMC,EAAS,MAAMC,EAIfK,EAFc,IAAI,cAEQ,OAAOP,CAAI,EACrCQ,EAAiBP,EAAO,SAASM,CAAW,EAElD,OAAOE,EAAcD,CAAc,CACvC,ECZME,EAAqD,CAAC,eAAgB,OAAO,EAEtEC,EAAc,MAAO,CAAE,QAAAC,KAAc,CAE9C,MAAMC,EADM,IAAI,IAAID,EAAQ,GAAG,EACN,aAEnBE,EAAwC,CAC1C,aAAc,CACV,cAAe,QACf,OAAQ,GACR,QAAS,EACb,EACA,MAAO,CAAE,SAAU,EAAG,GAG1B,UAAWC,KAAgBL,EAAwB,CACzC,MAAAM,EAAcH,EAAa,IAAIE,CAAY,EACjD,GAAIC,EACI,IACAF,EAAoBC,CAAY,EAAI,KAAK,MAAM,MAAMhB,EAAqBiB,CAAW,CAAC,OAClF,CACI,cAAM,mBAAmBD,CAAY,yBAAyB,CAC1E,CAER,CAEO,OAAAD,CACX,ECzBA,OAAO,MAAQG,EACf,OAAO,SAAWC,EAElB,MAAMC,EAAOC,EAAA,KAAK,IAAMC,EAAA,WAAO,oBAAQ,EAAE,+BAAMC,IAAY,CAAE,QAASA,EAAO,MAAO,CAAC,EAC/EC,EAAQH,EAAA,KAAK,IAAMC,EAAA,WAAO,qBAAS,EAAE,+BAAMC,IAAY,CAAE,QAASA,EAAO,OAAQ,CAAC,EAElFE,EAAmB,SAAS,eAAe,MAAM,EACvD,GAAI,CAACA,EACK,UAAI,MAAM,wBAAwB,EAG5C,MAAMC,EAAOC,EAAWF,CAAgB,EAElCG,EAASC,EAAoB,CAC/B,CACI,KAAM,MACN,SAAU,CACN,CACI,MAAO,GACP,OAAQjB,EACR,QACKkB,EAAA,IAAAC,WAAA,CAAS,SAAS,aACf,SAAAD,MAACV,GAAK,GACV,CAER,EACA,CACI,KAAM,QACN,OAAQR,EACR,QACKkB,EAAA,IAAAC,WAAA,CAAS,SAAS,mBACf,SAAAD,MAACN,GAAM,GACX,CAER,CACJ,CACJ,EACA,CACI,KAAM,IACN,OAAQ,IAAMQ,EAAS,KAAK,CAChC,CACJ,CAAC,EAEDN,EAAK,OACAI,MAAAG,aAAA,CACG,SAACH,MAAAI,EAAA,CAAe,OAAAN,CAAgB,GACpC,CACJ","names":["decompressBrotliData","data","brotli","brotliPromise","textDecoder","decompressedData","base64ToBytes","compressBrotliData","encodedData","compressedData","bytesToBase64","SEARCH_PARAMETERS_KEYS","rootLoader","request","searchParams","decodedSearchParams","parameterKey","searchParam","React","ReactDOM","Root","lazy","__vitePreload","module","Embed","containerElement","root","createRoot","router","createBrowserRouter","jsx","Suspense","redirect","StrictMode","RouterProvider"],"ignoreList":[],"sources":["../../src/utils/brotli.ts","../../src/helpers/loader.ts","../../src/main.tsx"],"sourcesContent":["import brotliPromise from 'brotli-wasm';\nimport { base64ToBytes, bytesToBase64 } from 'byte-base64';\n\nexport const decompressBrotliData = async (data: string) => {\n    const brotli = await brotliPromise;\n\n    const textDecoder = new TextDecoder();\n\n    const decompressedData = brotli.decompress(base64ToBytes(data));\n    const decodedData = textDecoder.decode(decompressedData);\n\n    return decodedData;\n};\n\nexport const compressBrotliData = async (data: string) => {\n    const brotli = await brotliPromise;\n\n    const textEncoder = new TextEncoder();\n\n    const encodedData = textEncoder.encode(data);\n    const compressedData = brotli.compress(encodedData);\n\n    return bytesToBase64(compressedData);\n};\n","import type { LoaderFunction } from 'react-router-dom';\nimport type { AppCustomFields, AppState } from '../states/useAppState';\nimport { decompressBrotliData } from '../utils/brotli';\n\nexport type LoaderData<TLoaderFn extends LoaderFunction> = Awaited<ReturnType<TLoaderFn>> extends Response | infer D ? D : never;\n\ntype SearchParameters = {\n    customFields: AppCustomFields;\n    state: AppState;\n};\n\nconst SEARCH_PARAMETERS_KEYS: (keyof SearchParameters)[] = ['customFields', 'state'];\n\nexport const rootLoader = (async ({ request }) => {\n    const url = new URL(request.url);\n    const searchParams = url.searchParams;\n\n    const decodedSearchParams: SearchParameters = {\n        customFields: {\n            appBridgeMode: 'block',\n            jsPath: '',\n            cssPath: '',\n        },\n        state: { settings: {} },\n    };\n\n    for (const parameterKey of SEARCH_PARAMETERS_KEYS) {\n        const searchParam = searchParams.get(parameterKey);\n        if (searchParam) {\n            try {\n                decodedSearchParams[parameterKey] = JSON.parse(await decompressBrotliData(searchParam));\n            } catch {\n                console.error(`Failed to parse ${parameterKey} from search parameters`);\n            }\n        }\n    }\n\n    return decodedSearchParams;\n}) satisfies LoaderFunction;\n","import 'virtual:uno.css';\nimport '@frontify/fondue/style';\nimport '@frontify/fondue/tokens/styles';\nimport '@unocss/reset/tailwind.css';\nimport './fonts/fonts.css';\n\nimport React, { StrictMode, Suspense, lazy } from 'react';\nimport ReactDOM from 'react-dom';\nimport { createRoot } from 'react-dom/client';\nimport { RouterProvider, createBrowserRouter, redirect } from 'react-router-dom';\n\nimport { rootLoader } from './helpers/loader';\n\nwindow.React = React;\nwindow.ReactDOM = ReactDOM;\n\nconst Root = lazy(() => import('./Root').then((module) => ({ default: module.Root })));\nconst Embed = lazy(() => import('./Embed').then((module) => ({ default: module.Embed })));\n\nconst containerElement = document.getElementById('root');\nif (!containerElement) {\n    throw new Error('Root element not found');\n}\n\nconst root = createRoot(containerElement);\n\nconst router = createBrowserRouter([\n    {\n        path: '/v1',\n        children: [\n            {\n                index: true,\n                loader: rootLoader,\n                element: (\n                    <Suspense fallback=\"Loading...\">\n                        <Root />\n                    </Suspense>\n                ),\n            },\n            {\n                path: 'embed',\n                loader: rootLoader,\n                element: (\n                    <Suspense fallback=\"Loading embed...\">\n                        <Embed />\n                    </Suspense>\n                ),\n            },\n        ],\n    },\n    {\n        path: '*',\n        loader: () => redirect('/v1'),\n    },\n]);\n\nroot.render(\n    <StrictMode>\n        <RouterProvider router={router} />\n    </StrictMode>,\n);\n"],"file":"assets/index-CF4uF-Xz.js"}